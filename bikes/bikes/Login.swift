//
//  Login.swift
//
//  Created on 10/7/16.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Login: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawLogin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 346, height: 642), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 346, height: 642), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 346, y: resizedFrame.height / 642)
        
        /// LOGIN FORM
        do {
            context.saveGState()
            context.translateBy(x: 28, y: 68)
            
            /// Rectangle 19
            let rectangle19 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 290, height: 350), cornerRadius: 4)
            context.saveGState()
            UIColor.white.setFill()
            rectangle19.fill()
            context.saveGState()
            rectangle19.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle19.cgPath)
            context.addRect(rectangle19.bounds.insetBy(dx: -20, dy: -20))
            context.clip(using: .evenOdd)
            UIColor(white: 0.914, alpha: 1).setStroke()
            rectangle19.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 19 (Outline Mask)
            context.saveGState()
            rectangle19.addClip()
            
            /// Rectangle 22
            let rectangle22 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 290, height: 60))
            context.saveGState()
            context.translateBy(x: 0, y: 290)
            UIColor(hue: 0.615, saturation: 0.618, brightness: 0.616, alpha: 1).setFill()
            rectangle22.fill()
            context.saveGState()
            rectangle22.lineWidth = 4
            context.beginPath()
            context.addPath(rectangle22.cgPath)
            context.addRect(rectangle22.bounds.insetBy(dx: -40, dy: -40))
            context.clip(using: .evenOdd)
            UIColor(hue: 0.615, saturation: 0.666, brightness: 0.37, alpha: 1).setStroke()
            rectangle22.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Log in using your Fa
            let logInUsingYourFa = NSMutableAttributedString(string: "Log in using your Facebook account.")
            logInUsingYourFa.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 12)!, range: NSRange(location: 0, length: logInUsingYourFa.length))
            logInUsingYourFa.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: logInUsingYourFa.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                logInUsingYourFa.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: logInUsingYourFa.length))
            }
            context.saveGState()
            logInUsingYourFa.draw(at: CGPoint(x: 49, y: 312))
            context.restoreGState()
            
            /// FB icon
            let fBIcon = UIBezierPath()
            fBIcon.move(to: CGPoint(x: 18.9, y: 0))
            fBIcon.addLine(to: CGPoint(x: 1.1, y: 0))
            fBIcon.addCurve(to: CGPoint(x: 0, y: 1.1), controlPoint1: CGPoint(x: 0.49, y: 0), controlPoint2: CGPoint(x: 0, y: 0.49))
            fBIcon.addLine(to: CGPoint(x: 0, y: 18.9))
            fBIcon.addCurve(to: CGPoint(x: 1.1, y: 20), controlPoint1: CGPoint(x: 0, y: 19.51), controlPoint2: CGPoint(x: 0.49, y: 20))
            fBIcon.addLine(to: CGPoint(x: 10.68, y: 20))
            fBIcon.addLine(to: CGPoint(x: 10.68, y: 12.25))
            fBIcon.addLine(to: CGPoint(x: 8.08, y: 12.25))
            fBIcon.addLine(to: CGPoint(x: 8.08, y: 9.24))
            fBIcon.addLine(to: CGPoint(x: 10.68, y: 9.24))
            fBIcon.addLine(to: CGPoint(x: 10.68, y: 7.01))
            fBIcon.addCurve(to: CGPoint(x: 14.56, y: 3.02), controlPoint1: CGPoint(x: 10.68, y: 4.43), controlPoint2: CGPoint(x: 12.26, y: 3.02))
            fBIcon.addCurve(to: CGPoint(x: 16.89, y: 3.14), controlPoint1: CGPoint(x: 15.67, y: 3.02), controlPoint2: CGPoint(x: 16.62, y: 3.1))
            fBIcon.addLine(to: CGPoint(x: 16.89, y: 5.84))
            fBIcon.addLine(to: CGPoint(x: 15.3, y: 5.84))
            fBIcon.addCurve(to: CGPoint(x: 13.8, y: 7.31), controlPoint1: CGPoint(x: 14.04, y: 5.84), controlPoint2: CGPoint(x: 13.8, y: 6.44))
            fBIcon.addLine(to: CGPoint(x: 13.8, y: 9.24))
            fBIcon.addLine(to: CGPoint(x: 16.79, y: 9.24))
            fBIcon.addLine(to: CGPoint(x: 16.4, y: 12.25))
            fBIcon.addLine(to: CGPoint(x: 13.8, y: 12.25))
            fBIcon.addLine(to: CGPoint(x: 13.8, y: 20))
            fBIcon.addLine(to: CGPoint(x: 18.9, y: 20))
            fBIcon.addCurve(to: CGPoint(x: 20, y: 18.9), controlPoint1: CGPoint(x: 19.51, y: 20), controlPoint2: CGPoint(x: 20, y: 19.51))
            fBIcon.addLine(to: CGPoint(x: 20, y: 1.1))
            fBIcon.addCurve(to: CGPoint(x: 18.9, y: 0), controlPoint1: CGPoint(x: 20, y: 0.49), controlPoint2: CGPoint(x: 19.51, y: 0))
            context.saveGState()
            context.translateBy(x: 20, y: 309)
            fBIcon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fBIcon.fill()
            context.restoreGState()
            
            /// Login to your acc
            do {
                context.saveGState()
                context.translateBy(x: -1, y: -1)
                
                /// Rectangle 21
                let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 292, height: 55))
                context.saveGState()
                UIColor(white: 0.976, alpha: 1).setFill()
                rectangle21.fill()
                context.saveGState()
                rectangle21.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle21.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.914, alpha: 1).setStroke()
                rectangle21.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// LOGIN TO YOUR ACCOUN
                let lOGINTOYOURACCOUN = NSMutableAttributedString(string: "LOGIN TO YOUR ACCOUNT")
                lOGINTOYOURACCOUN.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 14)!, range: NSRange(location: 0, length: lOGINTOYOURACCOUN.length))
                lOGINTOYOURACCOUN.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.431, alpha: 1), range: NSRange(location: 0, length: lOGINTOYOURACCOUN.length))
                context.saveGState()
                lOGINTOYOURACCOUN.draw(at: CGPoint(x: 57, y: 19))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
            // End Rectangle 19 (Outline Mask)
            
            /// Forgot your user nam
            let forgotYourUserNam = NSMutableAttributedString(string: "Forgot your user name or password?")
            forgotYourUserNam.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 12)!, range: NSRange(location: 0, length: forgotYourUserNam.length))
            forgotYourUserNam.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.759, alpha: 1), range: NSRange(location: 0, length: 12))
            forgotYourUserNam.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.571, saturation: 0.622, brightness: 0.933, alpha: 1), range: NSRange(location: 12, length: 9))
            forgotYourUserNam.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.759, alpha: 1), range: NSRange(location: 21, length: 4))
            forgotYourUserNam.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.571, saturation: 0.622, brightness: 0.933, alpha: 1), range: NSRange(location: 25, length: 8))
            forgotYourUserNam.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.759, alpha: 1), range: NSRange(location: 33, length: 1))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                forgotYourUserNam.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: forgotYourUserNam.length))
            }
            context.saveGState()
            forgotYourUserNam.draw(at: CGPoint(x: 41.5, y: 251))
            context.restoreGState()
            
            /// Email
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 74)
                
                /// Rectangle 25
                let rectangle25 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 250, height: 40), cornerRadius: 4)
                context.saveGState()
                context.saveGState()
                rectangle25.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle25.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.571, saturation: 0.622, brightness: 0.933, alpha: 1).setStroke()
                rectangle25.stroke()
                context.restoreGState()
                context.saveGState()
                rectangle25.lineWidth = 8
                context.beginPath()
                context.addPath(rectangle25.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.571, saturation: 0.622, brightness: 0.933, alpha: 0.1).setStroke()
                rectangle25.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// contact@dembsky.me
                let contactdembskyme = NSMutableAttributedString(string: "contact@dembsky.me")
                contactdembskyme.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 14)!, range: NSRange(location: 0, length: contactdembskyme.length))
                contactdembskyme.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.169, alpha: 1), range: NSRange(location: 0, length: contactdembskyme.length))
                context.saveGState()
                contactdembskyme.draw(at: CGPoint(x: 15, y: 12))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Password
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 134)
                
                /// Rectangle 25
                let rectangle2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 250, height: 40), cornerRadius: 4)
                context.saveGState()
                context.saveGState()
                rectangle2.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle2.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.914, alpha: 1).setStroke()
                rectangle2.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Password
                let password = NSMutableAttributedString(string: "Password")
                password.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 14)!, range: NSRange(location: 0, length: password.length))
                password.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.431, alpha: 1), range: NSRange(location: 0, length: password.length))
                context.saveGState()
                password.draw(at: CGPoint(x: 15, y: 12))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Sign in button
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 194)
                
                /// Rectangle 25
                let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 250, height: 40), cornerRadius: 4)
                context.saveGState()
                UIColor(hue: 0.571, saturation: 0.622, brightness: 0.933, alpha: 1).setFill()
                rectangle3.fill()
                context.restoreGState()
                
                /// Sign in
                let signIn = NSMutableAttributedString(string: "Sign in")
                signIn.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 14)!, range: NSRange(location: 0, length: signIn.length))
                signIn.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: signIn.length))
                context.saveGState()
                signIn.draw(at: CGPoint(x: 105, y: 12))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfLogin() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 346, height: 642), false, 0)
        Login.drawLogin()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
